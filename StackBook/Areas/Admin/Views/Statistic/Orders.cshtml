@model StackBook.ViewModels.OrderStatisticsVM
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Order Statistics";
}

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="text-primary mb-0">
                    <i class="fas fa-shopping-cart me-2"></i>Order Statistics
                </h1>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label for="startDate" class="form-label">From Date</label>
                            <input type="date" class="form-control" id="startDate" name="startDate" 
                                   value="@(Model.StartDate?.ToString("yyyy-MM-dd"))">
                        </div>
                        <div class="col-md-3">
                            <label for="endDate" class="form-label">To Date</label>
                            <input type="date" class="form-control" id="endDate" name="endDate" 
                                   value="@(Model.EndDate?.ToString("yyyy-MM-dd"))">
                        </div>
                        <div class="col-md-3">
                            <label for="timeRangeType" class="form-label">Time Range Type</label>
                            <select class="form-select" id="timeRangeType" name="timeRangeType">
                                <option value="Daily">By Day</option>
                                <option value="Weekly">By Week</option>
                                <option value="Monthly">By Month</option>
                            </select>
                        </div>

                        <div class="col-md-3 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-search me-1"></i>Filter
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="resetFilters()">
                                <i class="fas fa-refresh me-1"></i>Reset
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Overview -->
    <div class="row mb-4">
        <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
            <div class="card border-start border-primary border-4 shadow h-100">
                <div class="card-body text-center">
                    <div class="text-primary">
                        <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                    </div>
                    <div class="h4 mb-0 font-weight-bold text-gray-800">@Model.TotalOrders</div>
                    <div class="text-xs font-weight-bold text-primary text-uppercase">Total Orders</div>
                </div>
            </div>
        </div>

        <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
            <div class="card border-start border-success border-4 shadow h-100">
                <div class="card-body text-center">
                    <div class="text-success">
                        <i class="fas fa-check-circle fa-2x mb-2"></i>
                    </div>
                    <div class="h4 mb-0 font-weight-bold text-gray-800">@Model.CompletedOrders</div>
                    <div class="text-xs font-weight-bold text-success text-uppercase">Delivered</div>
                </div>
            </div>
        </div>

        <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
            <div class="card border-start border-warning border-4 shadow h-100">
                <div class="card-body text-center">
                    <div class="text-warning">
                        <i class="fas fa-clock fa-2x mb-2"></i>
                    </div>
                    <div class="h4 mb-0 font-weight-bold text-gray-800">@Model.ProcessingOrders</div>
                    <div class="text-xs font-weight-bold text-warning text-uppercase">Pending</div>
                </div>
            </div>
        </div>

        <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
            <div class="card border-start border-info border-4 shadow h-100">
                <div class="card-body text-center">
                    <div class="text-info">
                        <i class="fas fa-truck fa-2x mb-2"></i>
                    </div>
                    <div class="h4 mb-0 font-weight-bold text-gray-800">@Model.ShippingOrders</div>
                    <div class="text-xs font-weight-bold text-info text-uppercase">Shipping</div>
                </div>
            </div>
        </div>

        <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
            <div class="card border-start border-danger border-4 shadow h-100">
                <div class="card-body text-center">
                    <div class="text-danger">
                        <i class="fas fa-times-circle fa-2x mb-2"></i>
                    </div>
                    <div class="h4 mb-0 font-weight-bold text-gray-800">@Model.CanceledOrders</div>
                    <div class="text-xs font-weight-bold text-danger text-uppercase">Canceled</div>
                </div>
            </div>
        </div>

        <div class="col-lg-2 col-md-4 col-sm-6 mb-3">
            <div class="card border-start border-secondary border-4 shadow h-100">
                <div class="card-body text-center">
                    <div class="text-secondary">
                        <i class="fas fa-undo fa-2x mb-2"></i>
                    </div>
                    <div class="h4 mb-0 font-weight-bold text-gray-800">@Model.ReturnedOrders</div>
                    <div class="text-xs font-weight-bold text-secondary text-uppercase">Returned</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Revenue and Rates -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h6 class="m-0 font-weight-bold">
                        <i class="fas fa-dollar-sign me-2"></i>Total Revenue
                    </h6>
                </div>
                <div class="card-body text-center">
                    <div class="display-4 text-success font-weight-bold">
                        @Model.TotalRevenue.ToString("C0")
                    </div>
                    <p class="text-muted">Within selected time range</p>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-danger text-white">
                    <h6 class="m-0 font-weight-bold">
                        <i class="fas fa-percent me-2"></i>Cancelation Rate
                    </h6>
                </div>
                <div class="card-body text-center">
                    <div class="display-4 text-danger font-weight-bold">
                        @Model.CancelRate.ToString("F1")%
                    </div>
                    <p class="text-muted">Percentage of canceled orders</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row mb-4">
        <!-- Revenue Over Time Chart -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h6 class="m-0 font-weight-bold">Revenue Over Time</h6>
                </div>
                <div class="card-body">
                    <canvas id="revenueChart" height="100"></canvas>
                </div>
            </div>
        </div>

        <!-- Order Status Distribution -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h6 class="m-0 font-weight-bold">Order Status Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    @* <!-- Revenue by Category --> *@
    @* <div class="row mb-4"> *@
    @*     <div class="col-12"> *@
    @*         <div class="card shadow"> *@
    @*             <div class="card-header bg-secondary text-white"> *@
    @*                 <h6 class="m-0 font-weight-bold">Revenue by Category</h6> *@
    @*             </div> *@
    @*             <div class="card-body"> *@
    @*                 <canvas id="categoryChart" height="80"></canvas> *@
    @*             </div> *@
    @*         </div> *@
    @*     </div> *@
    @* </div> *@

    @* <!-- Top Customers --> *@
    @* <div class="row"> *@
    @*     <div class="col-12"> *@
    @*         <div class="card shadow"> *@
    @*             <div class="card-header bg-warning text-white"> *@
    @*                 <h6 class="m-0 font-weight-bold">Top Customers</h6> *@
    @*             </div> *@
    @*             <div class="card-body"> *@
    @*                 @if (Model.TopCustomers != null && Model.TopCustomers.Any()) *@
    @*                 { *@
    @*                     <div class="table-responsive"> *@
    @*                         <table class="table table-striped table-hover"> *@
    @*                             <thead class="table-dark"> *@
    @*                                 <tr> *@
    @*                                     <th>#</th> *@
    @*                                     <th>Customer Name</th> *@
    @*                                     <th>Email</th> *@
    @*                                     <th>Orders</th> *@
    @*                                     <th>Total Spent</th> *@
    @*                                     <th>Last Order</th> *@
    @*                                 </tr> *@
    @*                             </thead> *@
    @*                             <tbody> *@
    @*                                 @for (int i = 0; i < Model.TopCustomers.Count; i++) *@
    @*                                 { *@
    @*                                     var customer = Model.TopCustomers[i]; *@
    @*                                     <tr> *@
    @*                                         <td> *@
    @*                                             <span class="badge bg-primary">@(i + 1)</span> *@
    @*                                         </td> *@
    @*                                         <td class="fw-bold">@customer.FullName</td> *@
    @*                                         @* <td>@customer.</td> *@ 
    @*                                         <td> *@
    @*                                             <span class="badge bg-info">@customer.TotalOrders</span> *@
    @*                                         </td> *@
    @*                                         <td> *@
    @*                                             <span class="text-success fw-bold">@customer.TotalSpent.ToString("C0")</span> *@
    @*                                         </td> *@
    @*                                         @* <td>@customer.LastOrderDate.ToString("dd/MM/yyyy")</td> *@ 
    @*                                     </tr> *@
    @*                                 } *@
    @*                             </tbody> *@
    @*                         </table> *@
    @*                     </div> *@
    @*                 } *@
    @*                 else *@
    @*                 { *@
    @*                     <div class="text-center py-4"> *@
    @*                         <i class="fas fa-users fa-3x text-muted mb-3"></i> *@
    @*                         <p class="text-muted">No customer data available for this time period</p> *@
    @*                     </div> *@
    @*                 } *@
    @*             </div> *@
    @*         </div> *@
    @*     </div> *@
    @* </div> *@
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Data from server
        var revenueData = @Html.Raw(JsonConvert.SerializeObject(Model.RevenueByDate));
        var statusData = @Html.Raw(JsonConvert.SerializeObject(Model.OrderStatusChart));
        var categoryData = @Html.Raw(JsonConvert.SerializeObject(Model.RevenueByCategory));

        // Chart colors
        const colors = {
            primary: 'rgba(54, 162, 235, 0.8)',
            success: 'rgba(75, 192, 192, 0.8)',
            warning: 'rgba(255, 206, 86, 0.8)',
            danger: 'rgba(255, 99, 132, 0.8)',
            info: 'rgba(153, 102, 255, 0.8)',
            secondary: 'rgba(201, 203, 207, 0.8)'
        };

        // Revenue Over Time Chart
        const revenueCtx = document.getElementById('revenueChart').getContext('2d');
        new Chart(revenueCtx, {
            type: 'line',
            data: {
                labels: revenueData.Labels || [],
                datasets: [{
                    label: 'Revenue',
                    data: revenueData.Values || [],
                    borderColor: colors.primary,
                    backgroundColor: colors.primary.replace('0.8', '0.2'),
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4
                }]
            },
                    options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: true },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return 'Revenue: ' + new Intl.NumberFormat('en-US', {
                                style: 'currency',
                                currency: 'USD'
                            }).format(context.parsed.y);
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return new Intl.NumberFormat('en-US', {
                                style: 'currency',
                                currency: 'USD',
                                notation: 'compact'
                            }).format(value);
                        }
                    }
                }
            }
        }
        });

        // Order Status Chart
        const statusCtx = document.getElementById('statusChart').getContext('2d');
        new Chart(statusCtx, {
            type: 'doughnut',
            data: {
                labels: statusData.Labels || [],
                datasets: [{
                    data: statusData.Values || [],
                    backgroundColor: [
                        colors.success,
                        colors.warning,
                        colors.danger,
                        colors.secondary,
                        colors.info
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'bottom' },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.label + ': ' + context.parsed + ' orders';
                            }
                        }
                    }
                }
            }
        });

        // Revenue by Category Chart
        const categoryCtx = document.getElementById('categoryChart').getContext('2d');
        new Chart(categoryCtx, {
            type: 'bar',
            data: {
                labels: categoryData.Labels || [],
                datasets: [{
                    label: 'Revenue',
                    data: categoryData.Values || [],
                    backgroundColor: colors.success,
                    borderColor: colors.success.replace('0.8', '1'),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Revenue: ' + new Intl.NumberFormat('vi-VN', {
                                    style: 'currency',
                                    currency: 'VND'
                                }).format(context.parsed.y);
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return new Intl.NumberFormat('vi-VN', {
                                    style: 'currency',
                                    currency: 'VND',
                                    notation: 'compact'
                                }).format(value);
                            }
                        }
                    },
                    x: {
                        ticks: {
                            maxRotation: 45,
                            minRotation: 45
                        }
                    }
                }
            }
        });

        // Reset filters
        function resetFilters() {
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';
            document.getElementById('timeRangeType').selectedIndex = 0;
        }
    </script>
}