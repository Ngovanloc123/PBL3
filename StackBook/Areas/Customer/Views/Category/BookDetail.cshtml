@model StackBook.Models.Book

@{
    ViewData["Title"] = @Model.BookTitle;
}

<div class="container my-5">
    <div class="row gy-4">
        <!-- Book Image -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <img class="card-img-top rounded" src="@Model.ImageURL" alt="@Model.BookTitle" />
            </div>
        </div>

        <!-- Book Info -->
        <div class="col-md-8">
            <div class="card shadow-sm p-4">
                <!-- Title and Author -->
                <h2 class="fw-bold">@Model.BookTitle</h2>
                <p class="text-muted">
                    <span class="fw-medium">by</span> @string.Join(", ", @Model.Authors.Select(a => a.AuthorName))
                </p>
                <div class="d-flex align-items-center mb-3">
                    <span class="text-warning me-2">&#9733;&#9733;&#9733;&#9733;&#9734;</span>
                    <span class="text-muted">(5,412 ratings)</span>
                </div>

                <!-- Pricing -->
                <div class="border-top pt-3 mb-3">
                    <h4 class="text-danger fw-bold mb-1">$@Model.Price</h4>
                    <p class="mb-1">List Price: <span class="text-decoration-line-through">$@Model.Price</span></p>
                    <p class="text-success mb-0">FREE International Returns</p>
                </div>

                <!-- Stock and Quantity -->
                <form asp-action="AddToCart" asp-controller="Cart" method="post">
                    <input type="hidden" name="bookId" value="@Model.BookId" />
                    
                    <div class="border-top pt-3 mb-3">
                        <h5 class="text-primary">@((Model.Stock > 0) ? "In Stock" : "Out of Stock")</h5>
                        @if (Model.Stock > 0)
                        {
                            <div class="mb-3">
                                <label class="form-label">Quantity</label>
                                <input name="quantity" type="number" class="form-control w-50" min="1" max="@Model.Stock" value="1" />
                            </div>

                            <!-- Purchase Actions -->
                            <div class="d-flex flex-wrap gap-2">
                                <button type="submit" class="btn btn-warning flex-grow-1">
                                    <i class="bi bi-cart-plus"></i> Add to Cart
                                </button>
                                <a asp-controller="Order" asp-action="BuyNow" asp-route-bookId="@Model.BookId" class="btn btn-success flex-grow-1">
                                    <i class="bi bi-bag-check"></i> Buy Now
                                </a>
                            </div>
                        }
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Description -->
    <div class="row mt-5">
        <div class="col-12">
            <div class="card shadow-sm p-4">
                <h3 class="mb-3">Description</h3>
                <p style="white-space: pre-line;" class="text-secondary">
                    @Model.Description
                </p>
            </div>
        </div>
    </div>

    <!-- Same Category -->
    <div class="row mt-5">
        <div class="col-12">
            <h3 class="mb-4">Books in the Same Category</h3>
        </div>
            @foreach (var category in Model.Categories)
            {
                <div class="row g-4">
                    @await Component.InvokeAsync("Books", category.Books)
                </div>
            }
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const quantityInputs = document.querySelectorAll("input[type='number']");

        quantityInputs.forEach(input => {
            input.addEventListener("input", function () {
                const max = parseInt(this.max);
                const min = parseInt(this.min);
                let value = parseInt(this.value);

                if (value > max) {
                    this.value = max;
                } else if (value < min) {
                    this.value = min;
                }
            });
        });
    });
</script>
