@model StackBook.Models.Book

@{
    ViewData["Title"] = @Model.BookTitle;
}

@{
    int? page = null;
    if (int.TryParse(Context.Request.Query["page"], out var parsedPage))
    {
        page = parsedPage;
    }
}

<div class="container my-4">
    <div class="row g-4">
        <!-- Left Column - Book Image and Purchase Options -->
        <div class="col-md-4">
            <div class="card shadow-sm rounded-3 p-5">
                <!-- Book Image -->
                <div class="position-relative" style="padding-top: 150%">
                    <img src="@Model.ImageURL" class="card-img-top rounded-2 position-absolute w-75 h-75" alt="@Model.BookTitle" style="object-fit: cover; top: 8%; left: 12.5%;" />
                </div>
                @* <img class="card-img-top rounded-2 mb-3" src="@Model.ImageURL" alt="@Model.BookTitle" /> *@
                
                <!-- Stock and Quantity -->
                <form asp-action="AddToCart" asp-controller="Cart" method="post">
                    <input type="hidden" name="bookId" value="@Model.BookId" />
                    
                    <div class="mb-3">
                        <h6 class="@((Model.Stock > 0) ? "text-success" : "text-danger") mb-3">
                            @((Model.Stock > 0) ? "In Stock" : "Out of Stock")
                        </h6>
                        @if (Model.Stock > 0)
                        {
                            <div class="mb-3">
                                <label class="form-label fw-medium">Quantity</label>
                                <input name="quantity" type="number" class="form-control rounded-2" min="1" max="@Model.Stock" value="1" />
                            </div>

                            <!-- Purchase Actions -->
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-warning rounded-2 py-2">
                                    <i class="bi bi-cart-plus"></i> Add to Cart
                                </button>
                                <a asp-controller="Order" asp-action="BuyNow" asp-route-bookId="@Model.BookId" 
                                   class="btn btn-danger rounded-2 py-2">
                                    <i class="bi bi-bag-check"></i> Buy Now
                                </a>
                            </div>
                        }
                    </div>
                </form>
            </div>
        </div>

        <!-- Right Column - Top: Book Info, Bottom: Details -->
        <div class="col-md-8">
            <!-- Top Section - Book Basic Info -->
            <div class="card shadow-sm rounded-3 p-3 mb-4">
                <h2 class="fw-bold mb-2">@Model.BookTitle</h2>
                <p class="text-muted mb-3">
                    <span class="fw-medium">by</span> @string.Join(", ", @Model.Authors.Select(a => a.AuthorName))
                </p>
                
                <!-- Rating -->
                <div class="d-flex align-items-center mb-3">
                    <span class="text-warning me-2">&#9733;&#9733;&#9733;&#9733;&#9734;</span>
                    <span class="text-muted small">
                        @ViewData["CountRatingBook"] ratings
                    </span>
                    <span class="text-muted small ms-3">| Sold @Model.Stock</span>
                </div>
            </div>
                
                <!-- Pricing -->
                <div class="d-flex align-items-center mb-3">
                    <h4 class="text-danger fw-bold me-3 mb-0">@(Model.Price.ToString("N0")) đ</h4>
                    <span class="text-decoration-line-through text-muted me-2">@((Model.Price * 1.32).ToString("N0")) đ</span>
                    <span class="badge bg-danger">-24%</span>
                </div>
                
                <!-- Stock Info -->
                <p class="text-success mb-0">
                    <i class="bi bi-check-circle"></i> @Model.Stock bookstores have stock
                </p>
            </div>

            <!-- Bottom Section - Book Details -->
            <div class="card shadow-sm rounded-3 p-3">
                <h4 class="fw-bold mb-3">Product Details</h4>
                <div class="row">
                    <div class="col-md-6">
                        <p class="mb-2"><span class="fw-medium">Product Code:</span> @Model.BookId.ToString().Substring(0, 8)</p>
                        <p class="mb-2"><span class="fw-medium">Supplier:</span> @Model.Authors.First().AuthorName</p>
                        <p class="mb-2"><span class="fw-medium">Author:</span> @string.Join(", ", @Model.Authors.Select(a => a.AuthorName))</p>
                        <p class="mb-2"><span class="fw-medium">Publisher:</span> World</p>
                    </div>
                    <div class="col-md-6">
                        <p class="mb-2"><span class="fw-medium">Publish Year:</span> @Model.CreatedBook.Year</p>
                        <p class="mb-2"><span class="fw-medium">Language:</span> Vietnamese</p>
                        <p class="mb-2"><span class="fw-medium">Weight (g):</span> 300</p>
                    </div>
                </div>
                
                <!-- Description -->
                <div class="mt-4">
                    <h5 class="fw-medium">Description</h5>
                    <p style="white-space: pre-line;" class="text-secondary mt-2">
                        @Model.Description
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Same Category -->
    <div class="row mt-5">
        <div class="col-12">
            <h3 class="mb-4">Books in the Same Category</h3>
        </div>
        @foreach (var category in Model.Categories)
        {
            <div class="row g-4">
                @await Component.InvokeAsync("Books", new { books = category.Books, page = page }) 
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const quantityInputs = document.querySelectorAll("input[type='number']");

        quantityInputs.forEach(input => {
            input.addEventListener("input", function () {
                const max = parseInt(this.max);
                const min = parseInt(this.min);
                let value = parseInt(this.value);

                if (value > max) {
                    this.value = max;
                } else if (value < min) {
                    this.value = min;
                }
            });
        });
    });
</script>