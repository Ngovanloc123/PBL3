@model StackBook.Models.Book

@{
    ViewData["Title"] = @Model.BookTitle;
}

@{
    int? page = null;
    if (int.TryParse(Context.Request.Query["page"], out var parsedPage))
    {
        page = parsedPage;
    }
}

<div class="container my-4">
    <div class="row g-4">
        <!-- Left Column - Book Image and Purchase Options -->
        <div class="col-md-4">
            <div class="card shadow-sm rounded-3 p-5 align-items-center">
                <!-- Book Image -->
                <div class="position-relative w-100" style="padding-top: 150%; max-width: 250px;">
                    <img src="@Model.ImageURL" class="card-img-top rounded-2 position-absolute w-100 h-100 top-0 left-0 object-fit-cover" alt="@Model.BookTitle" />
                </div>
                @* <img class="card-img-top rounded-2 mb-3" src="@Model.ImageURL" alt="@Model.BookTitle" /> *@

                <!-- Stock and Quantity -->
                <form class="w-100 mt-5" asp-action="AddToCart" asp-controller="Cart" method="post">
                    <input type="hidden" name="bookId" value="@Model.BookId" />

                    <div>
                        <h6 class="@((Model.Stock > 0) ? "text-success" : "text-danger") mb-3">
                            @((Model.Stock > 0) ? "In Stock" : "Out of Stock")
                        </h6>
                        @if (Model.Stock > 0)
                        {
                            <div class="mb-3">
                                <label class="form-label fw-medium">Quantity</label>
                                <input name="quantity" id="quantityInput" type="number" class="form-control rounded-2" min="1" max="@Model.Stock" value="1" />
                            </div>

                            <!-- Purchase Actions -->
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary rounded-2 py-2 text-uppercase fw-bold">
                                    <i class="fa-solid fa-cart-shopping"></i> Add to Cart
                                </button>
                                <a id="buyNowLink" asp-controller="Category" asp-action="BuyNow"
                                   asp-route-bookId="@Model.BookId"
                                   asp-route-quantity="1"
                                   class="btn btn-dark rounded-2 py-2 text-uppercase fw-bold">
                                    <i class="bi bi-bag-check"></i> Buy Now
                                </a>
                            </div>
                        }
                    </div>
                </form>
            </div>
        </div>

        <!-- Right Column - Top: Book Info, Bottom: Details -->
        <div class="col-md-8">
            <!-- Top Section - Book Basic Info -->
            <div class="card shadow-sm rounded-3 p-3 mb-4">
                <h2 class="fw-bold mb-2">@Model.BookTitle</h2>
                <p class="text-muted mb-3">
                    <span class="fw-medium">by</span> @string.Join(", ", @Model.Authors.Select(a => a.AuthorName))
                </p>

                <!-- Rating -->
                <div class="d-flex align-items-center mb-3">
                    <span class="me-1 fw-semibold">@ViewData["AverageRatingBook"]</span>
                    @{
                        // Lấy giá trị rating trung bình (giả sử có trong ViewData)
                        double averageRating = ViewData["AverageRatingBook"] as double? ?? 0;
                        int fullStars = (int)Math.Floor(averageRating);
                        bool hasHalfStar = averageRating - fullStars >= 0.5;
                    }

                    <span class="text-warning me-2">
                        @for (int i = 0; i < fullStars; i++)
                        {
                            <i class="fas fa-star"></i> <!-- Full star -->
                        }

                        @if (hasHalfStar)
                        {
                            <i class="fas fa-star-half-alt"></i> <!-- Half star -->
                        }

                        @for (int i = 0; i < 5 - fullStars - (hasHalfStar ? 1 : 0); i++)
                        {
                            <i class="far fa-star"></i> <!-- Empty star -->
                        }
                    </span>
                    <span class="text-muted small">
                        @ViewData["CountRatingBook"] ratings
                    </span>
                    <span class="text-muted small ms-3">| Sold @ViewData["SoldBook"]</span>
                </div>

                <!-- Pricing -->
                <div class="d-flex align-items-center mb-3">
                    @{
                        // Tính toán giá gốc và phần trăm giảm
                        var discountPercent = 24; // 24%
                        var originalPrice = Model.Price / (1 - discountPercent / 100.0);
                    }
                    <h4 class="text-danger fw-bold me-3 mb-0">@Model.Price.ToString("C")</h4>
                    <span class="text-decoration-line-through text-muted me-2">@originalPrice.ToString("C")</span>
                    <span class="badge bg-danger">-@discountPercent%</span>
                </div>

                <!-- Stock Info -->
                <div style="flex:1;margin-right:16px; cursor:pointer;"
                     class="product_view_bookstore_desktop product_view_msg_bookstore num_bookstore_have_stock"
                     onclick="bookstore_have_stock.showPopUpBookstoresHaveStock()">
                    @Model.Stock bookstores have stock
                </div>
            </div>

            <!-- Bottom Section - Book Details -->
            <div class="card shadow-sm rounded-3 p-3">
                <h4 class="fw-bold mb-3">Product Details</h4>
                <div class="row">
                    <div class="col-md-6">
                        <p class="mb-2"><span class="fw-medium">Publish Year:</span> @Model.CreatedBook.Year</p>
                        <p class="mb-2"><span class="fw-medium">Category:</span> @ViewData["CategoriesBook"]</p>
                    </div>
                </div>

                <!-- Description -->
                <div class="mt-4">
                    <h5>Description</h5>
                    <p style="white-space: pre-line;" class="text-secondary mt-2">
                        @Model.Description
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Same Category -->
    @{
        var sameCategoryBooks = ViewData["SameCategoryBooks"] as List<Book>;
    }

    @if (sameCategoryBooks != null && sameCategoryBooks.Any())
    {
        <section class="category-section mb-5">
            <div class="d-flex justify-content-between align-items-center mt-5 pb-2">
                <h2>Books in the same Category</h2>
                <a asp-area="Customer" asp-controller="Category" asp-action="Index"
                   asp-route-CategoryId="@Model.Categories.First().CategoryId"
                   class="view-all text-decoration-none text-muted">View all ></a>
            </div>
            <div class="container-books">
                <div class="d-flex flex-wrap">
                    @foreach (var book in sameCategoryBooks)
                    {
                        <a asp-controller="Category" asp-action="BookDetail" asp-route-bookId="@book.BookId"
                           class="text-decoration-none text-black col-3 block p-4">
                            <div class="h-100 w-100 border border-1 rounded-3 border-solid hover-book"
                                 style="padding: 1.5rem 3rem;">
                                <div class="position-relative" style="padding-top: 150%;">
                                    <img class="object-fit-cover w-100 h-100 position-absolute top-0 left-0"
                                         src="@book.ImageURL" alt="@book.BookTitle">
                                </div>
                                <div class="text-center mt-4">
                                    <div class="fw-bold title">@book.BookTitle</div>
                                    <div class="author text-muted">
                                        @foreach (var author in book.Authors.Take(1))
                                        {
                                            <div>@author.AuthorName</div>
                                        }
                                    </div>
                                    <div class="text-body fw-bold">$@book.Price</div>
                                    <div class="book-rating">
                                        @{
                                            var averageRatingDictionary = ViewData["BookRatingForId"] as Dictionary<Guid, double>;
                                            double averageRating = averageRatingDictionary != null && averageRatingDictionary.ContainsKey(book.BookId)
                                            ? averageRatingDictionary[book.BookId]
                                            : 0;
                                            System.Console.WriteLine($"Average Rating for {book.BookTitle}: {averageRating}");
                                            int fullStars = (int)Math.Floor(averageRating);
                                            bool hasHalfStar = averageRating - fullStars >= 0.5;
                                        }
                                        <span class="text-warning">
                                            @for (int i = 0; i < fullStars; i++)
                                            {
                                                <i class="fas fa-star"></i> <!-- Full star -->
                                            }
                                            @if (hasHalfStar)
                                            {
                                                <i class="fas fa-star-half-alt"></i> <!-- Half star -->
                                            }
                                            @for (int i = 0; i < 5 - fullStars - (hasHalfStar ? 1 : 0); i++)
                                            {
                                                <i class="far fa-star"></i> <!-- Empty star -->
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </a>
                    }
                </div>
            </div>
        </section>
    }


    <!-- User Reviews Section -->
    @{
        var reviews = ViewData["Reviews"] as IEnumerable<Review>;
    }

    @if (reviews != null && reviews.Any())
    {
        <section class="mt-5">
            <h2 class="mb-4">Customer Reviews</h2>

            @foreach (var review in reviews)
            {
                <div class="card mb-4 border-0 rounded-3 review-hover">
                    <div class="card-body">
                        <div class="row">
                            <!-- Left Column - User Info and Rating -->
                            <div class="col-md-3">
                                <div class="d-flex align-items-center gap-2">
                                    @{
                                        var avtForUsers = ViewData["AvtForUsers"] as Dictionary<Guid, string>;
                                        string userAvatar = avtForUsers != null && avtForUsers.ContainsKey(review.UserId)
                                        ? avtForUsers[review.UserId]
                                        : "default-avatar.png"; // Fallback avatar
                                    }
                                    <img class="rounded-circle" src="@userAvatar" alt="User Avatar"
                                         style="width: 50px; height: 50px; object-fit: cover;"></img>
                                    <h5 class="fw-bold mb-2">
                                        @{
                                            var userDictionary = ViewData["UserNames"] as Dictionary<Guid, string>;
                                            string userName = userDictionary != null && userDictionary.ContainsKey(review.UserId)
                                            ? userDictionary[review.UserId]
                                            : "Unknown User";
                                        } @userName
                                    </h5>


                                    @*                                     
                                    <!-- Review Date -->
                                    <div class="text-muted small">
                                        @review.Cre.ToString("dd/MM/yyyy")
                                    </div> *@
                                </div>
                            </div>

                            <!-- Right Column - Review Content -->
                            <div class="col-md-9">
                                <!-- Rating Stars -->
                                <div class="mb-2">
                                    @{
                                        int rating = review.Rating;
                                    }
                                    <span class="text-warning">
                                        @for (int i = 0; i < rating; i++)
                                        {
                                            <i class="fas fa-star"></i>
                                        }
                                        @for (int i = rating; i < 5; i++)
                                        {
                                            <i class="far fa-star"></i>
                                        }
                                    </span>
                                </div>

                                <!-- Purchase Status -->
                                <div class="small mb-2">
                                    <span class="text-success">
                                        <i class="fas fa-check-circle"></i> Bought this book
                                    </span>
                                </div>
                                <div class="review-content">
                                    <p class="mb-3">@review.Comment</p>

                                    <!-- Review Metadata -->
                                    <div class="text-muted small">
                                        <span>Review at @review.CreatedAt.ToString("dd/MM/yyyy")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </section>
    }
    else
    {
        <div class="alert alert-info mt-5">
            No reviews yet. Be the first to review this book!
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const quantityInput = document.getElementById("quantityInput");
            const buyNowLink = document.getElementById("buyNowLink");

            // Function to update the Buy Now link
            function updateBuyNowLink() {
                let quantity = quantityInput.value;
                // Ensure quantity is within valid range
                if (quantity < 1) {
                    quantity = 1;
                    quantityInput.value = 1;
                } else if (quantity > @Model.Stock) {
                    quantity = @Model.Stock;
                    quantityInput.value = @Model.Stock;
                }

                // Update Buy Now link
                buyNowLink.href = `@Url.Action("BuyNow", "Category")?bookId=@Model.BookId&quantity=${quantity}`;
            }

            // Add event listeners
            quantityInput.addEventListener("input", updateBuyNowLink);
            quantityInput.addEventListener("change", updateBuyNowLink);

            // Initialize the link on page load
            updateBuyNowLink();
        });
    </script>
}

<style>
    .container p {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;
    }

    .author {
        font-size: 1rem;
    }

    .view-all {
        font-size: 1rem;
    }

    .title {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product_view_msg_bookstore {
        padding: 8px 12px;
        color: #2489F4;
        background-color: #E8F3FE;
        font-size: 1em;
        font-weight: 600;
        border-radius: 4px;
        margin-bottom: 16px;
    }

    .review-hover {
        transition: all 0.3s ease-in-out;
        border-color: #adb5bd1a !important;
    }

        .review-hover:hover {
            border-color: #dbdedfb8 !important;
            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
            transition: all 0.3s ease-in-out;
        }
</style>