@model List<StackBook.Models.Order>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css">

<div class="container mt-4">

    <div class="tab-content" id="orderTabsContent">
        <!-- All Orders Tab -->
        <div class="tab-pane fade show active" id="all" role="tabpanel" aria-labelledby="all-tab">
            @foreach (var order in Model)
            {
                <div class="card mb-3">
                    <div class="card-header d-flex justify-content-between">
                        <span>Order #@order.OrderId.ToString().Substring(0, 8)</span>

                        @if (order.Status == 1) // Pending
                        {
                            <form asp-action="Cancel" asp-route-orderId="@order.OrderId" method="post">
                                <button type="submit" class="btn btn-outline-danger btn-sm">Cancel</button>
                                <input type="hidden" name="status" value="@ViewBag.Status" />
                            </form>
                        }
                        else if (order.Status == 2) // Shipped
                        {
                            <form asp-action="Received" asp-route-orderId="@order.OrderId" method="post">
                                <button type="submit" class="btn btn-outline-success ">Received</button>
                                <input type="hidden" name="status" value="@ViewBag.Status" />
                            </form>
                        }
                        else if (order.Status == 4) // Delivered
                        {
                            <form asp-action="Return" asp-route-orderId="@order.OrderId" method="post">
                                <button type="submit" class="btn btn-outline-warning">Return</button>
                                <input type="hidden" name="status" value="@ViewBag.Status" />
                            </form>
                            @* @foreach (var item in order.OrderDetails)
                                {
                                    <button type="button" class="btn btn-outline-primary btn-sm mt-1" 
                                            onclick="showReviewModal('@order.OrderId', '@item.Book.BookId', '@item.Book.BookTitle', '@item.Book.Price', '@item.Quantity')">
                                        Add Review
                                    </button>
                                } *@
                        }

                    </div>
                    <div class="card-body">

                        @foreach (var item in order.OrderDetails)
                        {
                            <div class="d-flex align-items-center mb-3">
                                <a asp-controller="Category" asp-action="BookDetail" asp-route-bookId="@item.Book.BookId">
                                    <img src="@item.Book.ImageURL" class="img-thumbnail me-3" alt="Book" width="80">
                                </a>
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">
                                        <a asp-controller="Category" asp-action="BookDetail"
                                            asp-route-bookId="@item.Book.BookId" class="text-decoration-none text-dark">
                                            @item.Book.BookTitle
                                        </a>
                                    </h6>
                                    <p class="mb-0">$@item.Book.Price.ToString("0.00") x @item.Quantity</p>
                                </div>
                            </div>
                            Dictionary<Guid, Dictionary<Guid, bool>> orderReviews = ViewData["OrderReviews"] as Dictionary<Guid, Dictionary<Guid, bool>>;
                                bool unReviewed = false;
                            if (orderReviews != null && orderReviews.ContainsKey(order.OrderId) && orderReviews[order.OrderId].ContainsKey(item.Book.BookId))
                            {
                                unReviewed = orderReviews[order.OrderId][item.Book.BookId];
                                if (!unReviewed)
                                {
                                    <span class="badge bg-success">Reviewed</span>
                                }
                            }
                            else
                            {
                                unReviewed = true;
                            }

                            if (order.Status == 4 && unReviewed) // Only show "Add Review" button if order is delivered and not reviewed
                            {
                                <button type="button" class="btn btn-outline-primary btn-sm mt-1"
                                    onclick="showReviewModal('@order.OrderId', '@item.Book.BookId', '@item.Book.BookTitle', '@item.Book.Price', '@item.Quantity')">
                                    Add Review
                                </button>
                            }
                        }
                    </div>
                    <div class="d-flex justify-content-end mt-2">
                        <strong>Total: $@order.TotalPrice.ToString("0.00")</strong>
                    </div>
                </div>

            }
        </div>

        @if (!Model.Any())
        {
            <div class="alert alert-info">You don't have any orders yet.</div>
        }
    </div>

</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="border-radius: 10px;">
            <div class="modal-header">
                <h5 class="modal-title">Add a Review for</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="orderInfo">
                    <!-- Order info will be inserted here -->
                </div>
                <hr>
                <form id="reviewForm" method="post" asp-action="SubmitReview">
                    <input type="hidden" id="OrderId" name="orderId" />
                    <input type="hidden" id="BookId" name="bookId" />

                    <div class="rating mb-3">
                        <i class="fa-regular fa-star star" data-value="1"></i>
                        <i class="fa-regular fa-star star" data-value="2"></i>
                        <i class="fa-regular fa-star star" data-value="3"></i>
                        <i class="fa-regular fa-star star" data-value="4"></i>
                        <i class="fa-regular fa-star star" data-value="5"></i>
                    </div>
                    <input type="hidden" id="Rating" name="rating">


                    <div class="mb-3">
                        <label for="Comment" class="form-label">Review</label>
                        <textarea class="form-control" id="Comment" name="comment" rows="4"></textarea>
                    </div>

                    <button type="submit" class="btn btn-primary">Submit Review</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const reviewModal = document.getElementById('reviewModal');
    const ratingInput = document.getElementById('Rating');
    const orderInfo = document.getElementById('orderInfo');
    const reviewForm = document.getElementById('reviewForm');
    const stars = reviewModal?.querySelectorAll('.star');

    // Show review modal function
    window.showReviewModal = function(orderId, bookId, bookTitle, price, quantity) {
        document.getElementById('OrderId').value = orderId;
        document.getElementById('BookId').value = bookId;
        ratingInput.value = '';
        document.getElementById('Comment').value = '';

        // Reset star icons
        if (stars) {
            stars.forEach(star => {
                star.classList.remove('fa-solid');
                star.classList.add('fa-regular');
                star.style.color = '#ddd';
            });
        }

        // Format and display order info
        const total = (parseFloat(price) * parseInt(quantity)).toFixed(2);
        orderInfo.innerHTML = `
            <p>Order #${orderId.substring(0, 8)}</p>
            <p>${bookTitle}</p>
            <p>$${parseFloat(price).toFixed(2)} x ${quantity}</p>
            <p><strong>Total: $${total}</strong></p>
        `;

        // Show modal
        if (reviewModal) {
            new bootstrap.Modal(reviewModal).show();
        }
    };

    // Star rating functionality
    if (stars && reviewModal) {
        // Click handler for stars
        stars.forEach(star => {
            star.addEventListener('click', function() {
                const value = this.dataset.value;
                ratingInput.value = value;
                
                updateStars(value);
            });

            // Hover effects
            star.addEventListener('mouseenter', function() {
                const hoverValue = this.dataset.value;
                updateStars(hoverValue, true);
            });
        });

        // Reset stars when mouse leaves rating container
        reviewModal.querySelector('.rating').addEventListener('mouseleave', function() {
            const currentRating = ratingInput.value || 0;
            updateStars(currentRating);
        });
    }

    // Form submission handler
    if (reviewForm) {
        reviewForm.addEventListener('submit', function(e) {
            if (!ratingInput.value) {
                e.preventDefault();
                alert('Please select a rating!');
            }
        });
    }

    // Helper function to update star appearance
    function updateStars(value, isHover = false) {
        stars.forEach(star => {
            const starValue = star.dataset.value;
            if (starValue <= value) {
                star.classList.remove('fa-regular');
                star.classList.add('fa-solid');
                star.style.color = isHover ? '#ffd700' : '#ffc107';
            } else {
                star.classList.remove('fa-solid');
                star.classList.add('fa-regular');
                star.style.color = '#ddd';
            }
        });
    }

    // Activate tab based on URL hash
    const hash = window.location.hash;
    if (hash) {
        const tabTrigger = document.querySelector(`.nav-tabs button[data-bs-target="${hash}"]`);
        if (tabTrigger) {
            new bootstrap.Tab(tabTrigger).show();
        }
    }
});
</script>


@section Styles {
    <style>
        .rating-stars {
            font-size: 2rem;
            cursor: pointer;
        }

        /* Màu mặc định cho sao chưa chọn */
        .rating-stars .far {
            color: #ddd;
            /* Màu xám */
        }

        /* Màu khi active/hover */
        .rating-stars .fas {
            color: #ffc107;
            /* Màu vàng */
        }

        /* Hiệu ứng khi hover */
        .rating-stars i:hover {
            transform: scale(1.2);
            transition: transform 0.2s;
        }

        .modal-backdrop {
            opacity: 0.5 !important;
            background-color: #6c757d !important;
        }
    </style>
}
